---
swagger: '2.0'
info:
  title: Book-a-doctor-api-v1
  version: v1
paths:
  "/v1/appointments":
    post:
      summary: create appointment
      tags:
      - Appointments
      consumes:
      - application/json
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
      - name: params
        in: body
        schema:
          type: object
          properties:
            date_of_appointment:
              type: string
            doctor_id:
              type: string
          require:
          - doctor_id
          - date_of_appointment
      responses:
        '201':
          description: Appointment created
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  doctor_id:
                    type: integer
                  date_of_appointment:
                    type: string
        '403':
          description: Appointment not created
          schema:
            type: object
            properties:
              error:
                type: string
              error_message:
                type: object
                properties:
                  doctor:
                    type: array
                  date_of_appointment:
                    type: array
    get:
      summary: Get all appointments
      tags:
      - Appointments
      consumes:
      - application/json
      - application/xml
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
      responses:
        '200':
          description: appointment get all
          schema:
            type: object
            properties:
              message:
                type: array
              data:
                type: array
                properties:
                  id:
                    type: integer
                  date_of_appointment:
                    type: string
                  doctor_id:
                    type: integer
                  user_id:
                    type: integer
  "/v1/doctors/{id}":
    get:
      summary: show doctor
      tags:
      - Doctors
      produces:
      - application/json
      - application/xml
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
      - name: id
        in: path
        type: string
        required: true
      responses:
        '200':
          description: successful
        '404':
          description: doctor not found
    parameters:
    - name: id
      in: path
      type: string
      description: id
      required: true
    delete:
      summary: delete doctor
      responses:
        '200':
          description: successful
  "/v1/doctors":
    post:
      summary: create doctor
      tags:
      - Doctors
      consumes:
      - application/json
      - application/xml
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
      - name: doctor
        in: body
        schema:
          type: object
          properties:
            name:
              type: string
            specialization:
              type: string
            city:
              type: string
            cost_per_day:
              type: integer
            description:
              type: string
            image_url:
              type: string
          required:
          - name
          - specialization
          - city
          - cost_per_day
          - description
      responses:
        '201':
          description: doctor created
        '422':
          description: invalid request
        '200':
          description: successful
    get:
      summary: list doctors
      tags:
      - All doctors
      consumes:
      - application/json
      - application/xml
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        type: string
      responses:
        '200':
          description: successful
  "/v1/users/login":
    post:
      summary: Login to get user details and jwt token
      tags:
      - Users
      consumes:
      - application/json
      parameters:
      - name: params
        in: body
        schema:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
          require:
          - email
          - password
      responses:
        '200':
          description: user logged in
        '401':
          description: Invalid password
  "/v1/users/signup":
    post:
      summary: Creates a user
      tags:
      - Users
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: user
        in: body
        schema:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
          required:
          - name
          - email
          - password
      responses:
        '200':
          description: User created
          schema:
            type: object
            properties:
              token:
                type: string
              exp:
                type: string
              user_details:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  created_at:
                    type: string
                  updated_at:
                    type: string
                  name:
                    type: string
                  role:
                    type: string
        '403':
          description: Bad parameters
          schema:
            type: object
            properties:
              error:
                type: string
              error_message:
                type: object
                properties:
                  email:
                    type: array
                  password:
                    type: array
                  name:
                    type: array
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3001
securityDefinitions:
  JWT:
    description: the jwt for API auth
    type: apiKey
    name: Authorization
    in: header
